/*
[C++ 이전의 Computer Language 언어의 역사]
C언어는 절차지향언어로, 절차지향이란 말을 영어로 바꾸어보면 Procedure(함수)를 지향하는 언어
이 말은, 프로그램을 설계할 때 중요한 부분을 하나의 프로시저(함수)로 만들어서 쪼개어 처리한다는 뜻이다.
이 절차지향(함수지향)언어로 수십년을 버티다가 프로그램이 너무 방대해지자, 새로운 패러다임이 필요해졌고,
이에 객체지향언어가 탄생하게 된다. 90년대 이후의 언어 (C++, Java, Python, C# 등)는 대부분 객체지향이다.

[객체란?]
절차지향적 언어의 어떤 부분이 부복해서 객체지향언어가 필요하게 되었을까?
예를들어서 Animal 이라는 구조체를 만든 후 animal변수를 만들어서 이를 필요로 하는 함수들에게
play(list[play_with]) 이런느낌으로 list안에 특정 위치에 있는 구조체를 던져주게 되는데, 
이건 마치 "Play가 Animal을 한다." 처럼 해석되는데, 실은 "Animal이 Play를 한다." 가 조금 더 맞는 해석이다.
그래서 이를 

////////
Animal animal

animal.play();
animal.sleep();
////////

이런느낌으로 가는게 조금 더 맞다. 이러면 play에 animal을 던져주지 않아도 된다.
왜냐면 play함수는 animal이 플레이를 한다는 것을 알고있기 때문이다.
그래서 객체를 이렇게 정의할 수 있겠다.

[객체란, 변수들의 참고자료ㅕ들로 이루어진 소프트웨어 덩어리이다.]

이때, 객체가 현실 세계에서의 존재하는 것들을 나타내기 위해서는 추상화(abstraction)라는 과정이 필요하다.
컴퓨터 상에서 현실 세계를 100% 나타낼 수 없는 것이기 때문에, 적절하게 컴퓨터에서 처리할 수 있도록 바꾸는 것인데,
예를 들어서 핸드폰의 경우 "전화를 한다" || "문자를 보낸다" 와 같은 것들은 "핸드폰이 하는 것"으로 추상화를 사킬 수 있고,
핸드폰의 상태를 나타내는 것들, 예를 들어서 자기 자신의 전화번호나 배터리 잔량같은 것은 변수로 추상화 시킬 수 있다.

<<그런데 나는 Abstract를 추상화 보다 요약화 라고 하는게 조금 더 와닿는 것 같다.>>
<<왜냐면 하나의 큰 SW를 요약해서 한 단어로 보여주고 거기에서 dot을 이용해 들어가기 때문이다.>>
Wikipidia에서는 다음과 같이 표현한다.
[컴퓨터 과학에서 추상화(abstraction)는 복잡한 자료, 모듈, 시스템 등으로부터 
핵심적인 개념 또는 기능을 간추려 내는 것을 말한다.]

객체는 자기만의 정보를 나타내는 변수들과, 이를 가지고 있는 어떠한 작업을 하는 함수들로 둘러싸여 있다.
즉, 외부에서 어떠한 객체의 인스턴스(일반적으로 실행 중인 임의의 프로세스, 클래스의 현재 생성된 오브젝트) 변수값을 
바꾸지 못하고 오직 객체의 인스턴스 함수를 통해서만 
가능하게 하는 것을 의미한다. (물론 사용자가 조절도 가능하다.)
가상 이상적인 케이스는 다음과 같다.

/////////
Animal animal;

animal.food += 100; ----> 불가능 = 인스턴스 변수에 바로 접근
animal.increase_food(100); ----> 가능 = 인스턴스 함수를 통해 인스턴스 변수에 접근
/////////

굳이 이래야 될 필요가 있을까? 그냥 내 맘대로 변경하면 되는거 아니야?
위와같은 캡슐화의 장점은 간단하게 말하자면 

[객체가 내부적으로 어떻게 작동하는지 몰라도 사용할 줄 알게 된다.]

예를들어 food를 100 올리면, 내부 로직 상 몸무게도 10 올라가야만 한다고 쳐보자. 
그럼 food만 바꾸는 경우는 weight라는 것도 바꾸어 주어야 하지만, 
increase_food()를 쓰는 경우는 함수 안에서 다 처리를 해버리기 때문에, 그럴 필요가 없다.
굳이 다른사람이 작성한 논리를 완벽히 이해해야 할까?
아니다. 
그래서 increase_food를 만들었다는 것은 "food 올리려면 이것 써 나머지는 우리가 다 할께" 라고 
코드를 만든사람이 말하는 것과 같다.
좀더 쉬운 예는 키보드 a를 눌렀을 때, 이는 마치 my_computer.keyboard_hit("a"); 라는 메소드를 
호출한 것과 동일한 작업이다. 만약에 저렇게 캡슐화가 안되어있다면...?
난리난다.



[클래스란?]

그럼 객체는 C++ 상에서 어떻게 만들어낼까?
C++에서는 객체를 쉽게 만들 수 있는 장치인 객체의 설계도를 준비해 주었다.
그것이 바로 Class(클래스)이다.
클래스는 빈 메소드들과 빈 인스턴스 변수들로 이루어져 있다고 보면 된다.
클래스를 통해서 만들어진 객체를 인스턴스(instance)라고 한다.

////////////
*/
#include <iostream>

class Animal{
    private:
        int food;
        int weight;

    public:
        void set_animal(int _food, int _weight) {
            food = _food;
            weight = _weight;
        }
        void increase_food(int inc){
            food += inc;
            weight += (inc / 3);
        }
        void view_stat(){
            std::cout << "이 동물의 food    : " << food << std::endl;
            std::cout << "이 동뭉릐 weight  : " << weight << std::endl;
        }
};

int main(){
    Animal animal;
    animal.set_animal(100,50);
    animal.increase_food(30);

    animal.view_stat();
    return 0;
}
